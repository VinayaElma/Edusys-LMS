# Generated by Django 3.0.7 on 2020-07-03 08:31

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('CSE', 'Computer Science Engineering'), ('CE', 'Civil Engineering'),
                                                   ('CHE', 'Chemical Engineering'), ('EEE', 'Electrical and Electronics Engineering'),
                                                   ('ECE', 'Electronics and Communication Engineering'), ('ME', 'Mechanical Engineering')], max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=6, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('semester', models.PositiveSmallIntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'),
                                                                                   (4, '4'), (5, '5'), (6, '6'),
                                                                                   (7, '7'), (8, '8')], null=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject',
                                                 to='accounts.Department')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),

                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. '
                                                            'Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('teacher', 'Teacher'), ('student', 'Student')],
                                               default='student', max_length=7)),
                ('phone_number', models.PositiveIntegerField(blank=True, null=True, unique=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('roll_number', models.CharField(blank=True, max_length=8, null=True, unique=True)),
                ('semester', models.PositiveSmallIntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'),
                                                                                   (4, '4'), (5, '5'), (6, '6'),
                                                                                   (7, '7'), (8, '8')], null=True)),
                ('year_of_admission', models.PositiveIntegerField(blank=True, null=True)),
                ('position', models.CharField(blank=True, choices=[('HOD', 'Head of the Department'),
                                                                   ('Professor', 'Professor'),
                                                                   ('Asscociate Professor', 'Associate Professor'),
                                                                   ('Asstistant Professor', 'Assistant Professor'),
                                                                   ('Senior Lecturer', 'Senior Lecturer'),
                                                                   ('Guest Lecturer', 'Guest Lecturer')], max_length=30,
                                              null=True)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                 related_name='user', to='accounts.Department')),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. '
                                                            'A user will get all permissions '
                                                            'granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.Group',
                                                  verbose_name='groups')),
                ('subjects', models.ManyToManyField(blank=True, to='accounts.Subject')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]